
                     --------------------------------
                          LAMMPS Intel(R) Package
                     --------------------------------
                     
                        W. Michael Brown (Intel)
                       michael.w.brown at intel.com

                          Anupama Kurpad (Intel)

-----------------------------------------------------------------------------

This package is based on the USER-OMP package and provides LAMMPS styles that:

   1. include support for single and mixed precision in addition to double.
   2. include modifications to support vectorization for key routines
   3. include modifications to support offload to Intel(R) Xeon Phi(TM) 
      coprocessors

-----------------------------------------------------------------------------

When using the suffix command with "intel", intel styles will be used if they
exist; if they do not, and the USER-OMP package is installed and an omp version
exists, that style will be used. For example, in the case the USER-OMP package
is installed,

      kspace_style     pppm/intel 1e-4

is equivalent to:

      kspace_style     pppm/omp   1e-4

because no pppm style has been implemented for the Intel package.

-----------------------------------------------------------------------------

In order to use offload to Intel(R) Xeon Phi(TM) coprocessors, the flag 
-DLMP_INTEL_OFFLOAD should be set in the Makefile. Offload requires the use of 
Intel compilers.

-----------------------------------------------------------------------------

For portability reasons, vectorization directives are currently only enabled 
for Intel compilers. Using other compilers may result in significantly
lower performance.

-----------------------------------------------------------------------------

By default, when running with offload to Intel(R) coprocessors, affinity
for host MPI tasks and OpenMP threads is set automatically within the code.
This currently requires the use of system calls. To disable at build time,
compile with -DINTEL_OFFLOAD_NOAFFINITY.
