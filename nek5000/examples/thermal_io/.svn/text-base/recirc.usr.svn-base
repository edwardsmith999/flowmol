c-----------------------------------------------------------------------
c
c  This case demonstrates two relatively novel features:
c
c  a.  Adding multiple passive scalar (PS) fields to a case
c      where only velocity and temperature have been defined.
c
c      In this example, additional PS fields are added simply as:
c
c        call add_temp(f2tbc,nbc)
c
c      where f2tbc() is a character array specifying how the
c      boundary conditions of the preceding field are mapped to
c      those of the new field and nbc indicates the number of 
c      boundary conditions to be converted.   If nbc=0 then
c      the new field inherits the bcs of the preceding field.
c
c  b.  Recycling boundary conditions where, for each PS field
c      k>0, the inflow temperature is taken from the outflow
c      of PS field k-1.   (Here, k=0 implies temperature.)
c
c  In this case, the hydrodynamics are recycled (i.e., periodic
c  with a time lag of dt), but the passive scalar (i.e., temperature)
c  is propagated forward from one domain to the next.
c
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)


c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).


      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      if (istep.eq.0) call set_inflow
      call get_inflow

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (i,j,k,f,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /rbc/ ubc(lx1,ly1,lz1,lelt)
     $           , vbc(lx1,ly1,lz1,lelt)
     $           , wbc(lx1,ly1,lz1,lelt)
     $           , tbc(lx1,ly1,lz1,lelt,ldimt1)

      integer e,eg,f

      e = gllel(eg)

      if (ifield.eq.1) then        ! Recycle velocity
         ux=ubc(i,j,k,e)
         uy=vbc(i,j,k,e)
         uz=wbc(i,j,k,e)
      elseif (ifield.eq.2) then    ! Thermal inlet
         temp=1.0
      else                         ! Propagate temperature
         temp=tbc(i,j,k,e,ifield-2)
      endif

      flux = 0.

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (i,j,k,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,eg

      ux=1.0 + 0.01*y
      uy=0.0
      uz=0.0
      temp=0
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'
      character*3 f2tbc(2,ldimt1)

      nbc = 0      ! No changes in boundary conditions required
      do i=1,ldimt-1
         call add_temp(f2tbc,nbc)
      enddo

      igeom = 2
      call setup_topo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'


      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c-----------------------------------------------------------------------
      subroutine add_temp(f2tbc,nbc)
      include 'SIZE'
      include 'TOTAL'
      character*3 f2tbc(2,nbc)

      integer e,f

      nfld=nfield+1

      write(6,*) 'add temp: ',nfld,nfield,istep

      nelfld(nfld) = nelfld(nfield)
      nel = nelfld(nfield)
      call copy  (bc(1,1,1,nfld),bc(1,1,1,nfield),30*nel)
      call chcopy(cbc(1,1,nfld),cbc(1,1,nfield),3*6*nel)

      do k=1,3
         cpfld(nfld,k)=cpfld(nfield,k)
         call copy (cpgrp(-5,nfld,k),cpgrp(-5,nfield,k),16)
      enddo
      call icopy(matype(-5,nfld),matype(-5,nfield),16)

      ifadvc(nfld) = .true.
      iftmsh(nfld) = .true.
      ifvarp(nfld) = ifvarp(nfield)
      if (nfld.eq.2) ifto = .true.
      if (nfld.gt.2) ifpsco(nfld-2) = .true.
      if (nfld.gt.2) npscal = npscal+1


      nfield = nfld

      nface = 2*ndim
      do k=1,nbc               ! BC conversion
        do e=1,nelfld(nfld)
        do f=1,nface
          if (cbc(f,e,nfld).eq.f2tbc(1,k)) cbc(f,e,nfld)=f2tbc(2,k)
        enddo
        enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine set_inflow
      include 'SIZE'
      include 'TOTAL'

      common /ibc/ gsh_bc
      integer gsh_bc

      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal
      common /c_is1/ glo_num(1*lx1*ly1*lz1*lelv)
      integer*8 glo_num,eg
      common /ivrtx/ vertex ((2**ldim)*lelt)
      integer vertex

      common /scruz/ mask(lx1*ly1*lz1*lelt)
      real mask

      integer e,f


      n     = nx1*ny1*nz1*nelt
      nxyz  = nx1*ny1*nz1
      nface = 2*ndim

      l=0
      do e=1,nelt
         eg = lglel(e)
         do i=1,nxyz
            l=l+1
            glo_num(l) = i + nxyz*(eg-1)
         enddo
      enddo

      call rzero(mask,n)
      do e=1,nelt
      do f=1,nface
         if (cbc(f,e,1).eq.'v  ') call facev(mask,e,f,1.0,nx1,ny1,nz1)
      enddo
      enddo

      nshift = 2*nxyz
      do i=1,n
         if (mask(i).lt.0.1) glo_num(i)=glo_num(i)-nshift
      enddo
      call gs_setup (gsh_bc,glo_num,n,nekcomm,mp)
      call gs_op    (gsh_bc,mask,1,1,0)  ! 1 ==> +
      call gs_free  (gsh_bc)

      do i=1,n
         if (mask(i).lt.0.1) glo_num(i) = 0  ! Preserve only active pairs
      enddo
      call gs_setup (gsh_bc,glo_num,n,nekcomm,mp)

      return
      end
c-----------------------------------------------------------------------
      subroutine get_inflow
      include 'SIZE'
      include 'TOTAL'

      common /ibc/ gsh_bc
      integer gsh_bc

      common /rbc/ ubc(lx1,ly1,lz1,lelt)
     $           , vbc(lx1,ly1,lz1,lelt)
     $           , wbc(lx1,ly1,lz1,lelt)
     $           , tbc(lx1,ly1,lz1,lelt,ldimt1)

      common /scruz/ mask(lx1*ly1*lz1*lelt)
      real mask

      integer e,f

      nface = 2*ndim
      n     = nx1*ny1*nz1*nelt

      call opcopy(ubc,vbc,wbc,vx,vy,vz)
      do k=1,1+npscal
         call copy(tbc(1,1,1,1,k),t(1,1,1,1,k),n)
      enddo

      do e=1,nelt
      do f=1,nface

         if (cbc(f,e,1).eq.'v  ') call facev(ubc,e,f,0.,nx1,ny1,nz1)
         if (cbc(f,e,1).eq.'v  ') call facev(vbc,e,f,0.,nx1,ny1,nz1)
         if (cbc(f,e,1).eq.'v  ') call facev(wbc,e,f,0.,nx1,ny1,nz1)

         if (cbc(f,e,2).eq.'t  ') then
           do k=1,1+npscal
             call facev(tbc(1,1,1,1,k),e,f,0.,nx1,ny1,nz1)
            enddo
         endif

      enddo
      enddo

      call gs_op    (gsh_bc,ubc,1,1,0)  ! Transfer interior velocities
      call gs_op    (gsh_bc,wbc,1,1,0)  ! to inlet
      call gs_op    (gsh_bc,vbc,1,1,0)  ! 

      do k=1,1+npscal
        call gs_op    (gsh_bc,tbc(1,1,1,1,k),1,1,0)
      enddo

c     call outpost(ubc,vbc,wbc,mask,tbc,'   ')
c     stop

      return
      end
c-----------------------------------------------------------------------
