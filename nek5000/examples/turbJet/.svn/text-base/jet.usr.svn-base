C This is a LES turbulent jet flow example using a recyclcing method
C to get a fully developed turbulent inflow boundary condition.
C The mesh was created out of two circular geometries which were
C extruded into the third dimension followed by a merge operation.
C Close to the outflow boundary the flow will be accelerated to avoid  
C solver instabilities due to backflow.
C Instead of a LES SGS model a simple filtering approach is used. 
c
C-----------------------------------------------------------------------
C
C  USER SPECIFIED ROUTINES:
C
C     - boundary conditions
C     - initial conditions
C     - variable properties
C     - forcing function for fluid (f)
C     - forcing function for passive scalar (q)
C     - general purpose routine for checking errors etc.
C
C-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)

C Set user variable properties

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      return
      end

C=======================================================================

      subroutine userf  (ix,iy,iz,ieg)

C Set user forcing function for the momentum

      include 'SIZE'
      include 'TSTEP'
      include 'NEKUSE'

      FFY = 0.0
      FFX = 0.0
      FFZ = 0.0

      return
      end

C=======================================================================

      subroutine userq  (ix,iy,iz,ieg)

C Set user forcing function for scalars

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol = 0.0

      return
      end

C=======================================================================

      subroutine userchk

      include 'SIZE'
      include 'TOTAL'

      common /nekmpi/ mid,mp,nekcomm,nekgroup,nekreal

      common /inflow/   uin(lx1,ly1,lz1,lelt)
     &                 ,vin(lx1,ly1,lz1,lelt)
     &                 ,win(lx1,ly1,lz1,lelt)

      common /scrns/ wt(lx1*ly1*lz1,lelt)

      integer*8 glo_num(lx1*ly1*lz1*lelt)
      integer gs_bc_hndl
      save gs_bc_hndl

      integer e,f,eg

      ! mesh parameters
      nslab       = 8         
      ne_per_slab = 84
      n_in_pipe   = nslab*ne_per_slab

      nface = 2*ndim
      nxyz  = nx1*ny1*nz1
      n     = nxyz*nelv

      ifxyo = .true.
      if (istep.gt.iostep) ifxyo = .false.

c     Connect slab next to the last with inflow (recycling method)
      if(istep.eq.0) then 

        do i=1,n
           glo_num(i)=0  ! integer*8
        enddo

        do e=1,nelv
           eg = lglel(e)
           if (eg.le.n_in_pipe) then
              do j=1,nx1*ny1             ! Only on FACE 5 (inflow)
                 iloc          = j + nxyz*(e -1)
                 glo_num(iloc) = j + nxyz*(eg-1)
                 ieshift       = eg + (nslab-1)*ne_per_slab
                 ishift        = j + nxyz*(ieshift-1)
                 if (eg.le.ne_per_slab) glo_num(iloc) = ishift
              enddo
           endif
        enddo
        call gs_setup(gs_bc_hndl,glo_num,n,nekcomm,mp)
      endif

c     Compute perturbation energy of whole domain and pipe
      e2 = glsc3(vx,bm1,vx,n) + glsc3(vy,bm1,vy,n)
      e2 = e2/volvm1

      call rzero(wt,n)
      do e=1,nelv
         eg = lglel(e)
         if (eg.le.n_in_pipe) call copy(wt(1,e),bm1(1,1,1,e),nxyz)
      enddo
      vol_pipe = glsum(wt,n)
      ew = glsc3(vx,wt,vx,n) + glsc3(vy,wt,vy,n)
      ew = ew/vol_pipe

c     Copy velocity of last pipe slab back to the inflow
      wa = glsc2(vz,wt,n)/vol_pipe
      scale = 1.
      if (istep.gt.0) scale = 1./wa  ! To ensure mean inlet speed=1.

      call cmult2(uin,vx,scale,n)
      call cmult2(vin,vy,scale,n)
      call cmult2(win,vz,scale,n)

      call col2(uin,v1mask,n)        ! Zero out except inflow
      call col2(vin,v2mask,n)
      call col2(win,v3mask,n)

      call gs_op(gs_bc_hndl,uin,1,1,0)  ! 1 ==> +  ! uin(inflow) = vx(slab_k)
      call gs_op(gs_bc_hndl,vin,1,1,0)  ! 1 ==> +
      call gs_op(gs_bc_hndl,win,1,1,0)  ! 1 ==> +

c     Accelerate flow near the outflow
      call accl_outflow()

      if (nid.eq.0.and.(istep.le.1000.or.mod(istep,20).eq.0))
     $                     write(6,1) istep,time,e2,ew,wa
    1 format(i6,1p4e15.7,' e2')

      ddmax = glmax(t,n)
      ddmin = glmin(t,n)
      if(nid.eq.0) write(6,*) 't max/min:', ddmax, ddmin

      return
      end

C=======================================================================

      subroutine userbc (ix,iy,iz,iside,ieg)

C  Set user boundary conditions

      include 'SIZE'
      include 'TSTEP'
      include 'PARALLEL'
      include 'NEKUSE'

      common /inflow/   uin(lx1,ly1,lz1,lelt)
     &                 ,vin(lx1,ly1,lz1,lelt)
     &                 ,win(lx1,ly1,lz1,lelt)


      nslab       = 8         ! 8 slabs total
      ne_per_slab = 84
      n_in_pipe   = nslab*ne_per_slab

      ux   = 0.             
      uy   = 0.
      uz   = 0.
      flux = 0.
      temp = 0.

      if (ifield .eq. 1) then                     ! velocity
         if (ieg.gt.n_in_pipe) then               ! coflow
            ux = 0.0
            uy = 0.0
            uz = sstep(0.0, 0.1, 0.6, 0.035, R)
         elseif (iside.eq.5) then                 ! pipe inflow
            iel = gllel(ieg)
            ux  = uin(ix,iy,iz,iel)
            uy  = vin(ix,iy,iz,iel)
            uz  = win(ix,iy,iz,iel)
         endif
      elseif (ifield .eq. 2) then
          temp = 0.0                                 
          if (ieg.le.ne_per_slab) temp = 1.0     
      endif 

      return
      end

C=======================================================================

      subroutine useric (ix,iy,iz,ieg)

C   Set initial conditions

      include 'SIZE'
      include 'TSTEP'
      include 'NEKUSE'

      integer idum
      save    idum
      data    idum / 0 /

      if (idum.eq.0) idum = 999 + nid       ! this is the poor man solution
                                            ! to get hopefully uncorrelated
                                            ! random numbers in parallel
 
c     peturbation level 
      eps = 0.2

      if (r.le.0.5) then                    ! jet flow
        if (ifield .eq. 1) then
c         blunt profile w/ perturbations
          ur  = 24*(0.5**4 - r**4)          ! Vanish at r=.5
          ux  = ur * eps*(ran1(idum)-0.5)   ! ux and uy to vanish at r=.5
          uy  = ur * eps*(ran1(idum)-0.5)
          uz  = ur + eps*(ran1(idum)-0.5)   ! ur + perturbation
        elseif(ifield .eq. 2) then
          temp = 1.0
        endif
      else                                  ! coflow
         if (ifield .eq. 1) then
           ux = 0.0
           uy = 0.0
           uz = sstep(0.0, 0.1, 0.6, 0.035, R)
         elseif (ifield .eq. 2) then
           temp = 0.0
        endif
      endif

      if (ifield.eq.2) then
        temp = sstep(1.0, 0.0, 0.6, 0.08, R)
      endif

      return
      end

C=======================================================================

      subroutine usrdat

      return
      end

C=======================================================================

      subroutine usrdat2

      include 'SIZE'
      include 'TOTAL'

      character*3 cbv

      nslab       = 8         ! 8 slabs total
      ne_per_slab = 84
      n_in_pipe   = nslab*ne_per_slab

      nxyz = NX1 * NY1 * NZ1
      ntot = NX1 * NY1 * NZ1 * NELT

C   scale diameter to 1.0
      fac = 0.5/0.4
      call cmult(xm1, fac, ntot)
      call cmult(ym1, fac, ntot)

C fix geometry
      call fix_geom

c set boundary conditions
      do ifld = 1,nfield
      do iel  = 1,nelt
         if(lglel(iel).le.n_in_pipe) then   ! upstream pipe for jet inflow 
            do ifc=1,2*ndim
               cbv = cbc(ifc,iel,1)
               if (cbv.ne.'E  ') then       ! skin 
                  if (ifld.eq.1) then     ! velocity 
                     cbc(ifc,iel,1) = 'W  '
                     if(ifc.eq.5) cbc(ifc,iel,1) = 'v  ' 
                  elseif (ifld.eq.2) then ! scalar1 
                     cbc(ifc,iel,2) = 'I  '
                     if(ifc.eq.5) cbc(ifc,iel,2) = 't  '
                  endif
               endif
            enddo
         else                             ! downstream domain 
            do ifc=1,2*ndim
               cbv = cbc(ifc,iel,1)
               if (cbv.ne.'E  ') then   
                  if (ifld.eq.1) then ! velocity 
                     cbc(ifc,iel,1) = 'v  '
                  elseif (ifld.eq.2) then ! scalar1 
                     cbc(ifc,iel,2) = 'I  '
c                     if(ifc.eq.5) cbc(ifc,iel,2) = 't  '
                  endif
                  if(ifc.eq.6) cbc(ifc,iel,ifld) = 'O  ' ! outflow
               endif
            enddo
         endif
      enddo
      enddo

      return
      end

C=======================================================================
      subroutine usrdat3

      return
      end
C=======================================================================
       real function sstep(vbs,vas,sp,epsmr,r)

c      Smooth Step Function
c      Create a smooth jump from vbs,vas (if r is increasing)
c      with a inflection point sp and a smoothness factor epsmr
c      (epsmr->0 discontinous jump)
c      r denotes the independent variable

       implicit none
       real vbs,vas,sp,r,epsmr
       real delta,aid

       delta = (vas-vbs)
       aid =  0.5*delta*(tanh((r-sp)/epsmr) + 1.0) + vbs
       sstep = aid !max(1e-15,aid)

       return
       end
c-----------------------------------------------------------------------
      subroutine accl_outflow()
c
c     Add some divergence to the outflow layer elements to 
c     accelerate the flow. This can be helpful for a 
c     turbulent outflow boundary with a strong backflow 
c
      include 'SIZE'
      include 'TOTAL'
c
      integer e,f

      integer icalld
      save    icalld
      data    icalld  /0/
c
      common /cvflow_d/ dist(lx2,ly2,lz2,lelt),dmax
c
      if(icalld.ne.0) return

      nxyz2 = nx2*ny2*nz2
      ntot2 = nx2*ny2*nz2*nelv
      ntot1 = nx1*ny1*nz1*nelv

      call rzero(usrdiv,ntot2)

c     Compute projected normal distance from outflow
      call rzero(dist,ntot2)
      davg = 0.
      wavg = 0.
      zmax = glmax(zm1,ntot1)
      if(ifsplit) call copy(zm2,zm1,ntot1)
      do e=1,nelv
         if (cbc(6,e,1).eq.'O  ') then  ! Outflow
            do k=1,nxyz2
               dist(k,1,1,e) = zmax-zm2(k,1,1,e)
               davg = davg+dist(k,1,1,e)
               wavg = wavg+1.0
            enddo
         endif
      enddo
      dmax = glmax(dist,ntot2)
      davg = glsum(davg,1)
      wavg = glsum(wavg,1)
      if (wavg.gt.0) davg = davg/wavg
      if (nid.eq.0) write(6,1) dmax,davg,wavg
    1 format('div: davg:',1p3e12.4)
      dmax = 0.5*(dmax+davg)

c     Get constant multiplier for divergence (acceleration factor)
      vnmo_desired  = 0.2
      cdiv          = 1.5*vnmo_desired/dmax
      cdiv          = max(0.,cdiv) ! No contraction

c     Fill user defined divergence into usrdiv
      dmax2 = dmax*dmax
      nd    = 0
      if (ifsplit) then
         do i=1,ntot2
            dd = dist(i,1,1,1)*dist(i,1,1,1)
            dd = min(dmax2,dd)
            if (dist(i,1,1,1).ge.0) usrdiv(i,1,1,1) = cdiv*(1.-dd/dmax2)
            if (dist(i,1,1,1).ge.0) nd = nd+1
         enddo
      else
         do i=1,ntot2
            dd = dist(i,1,1,1)*dist(i,1,1,1)
            dd = min(dmax2,dd)
            if (dist(i,1,1,1).ne.0) usrdiv(i,1,1,1) = cdiv*(1.-dd/dmax2)
            if (dist(i,1,1,1).ne.0) nd = nd+1
         enddo
      endif
      dsmin = glmin(dist,ntot2)
      dsmax = glmax(dist,ntot2)
      dvmin = glmin(usrdiv,ntot2)
      dvmax = glmax(usrdiv,ntot2)
      xd    = nd
      xd    = glsum(xd,1)
      nd    = xd
      if(nid.eq.0)write(6,2) istep,nd,dvmin,dvmax,dsmin,dsmax,cdiv,dmax2
    2 format(2i9,1p6e11.3,'divmnmx')

      icalld = 1
c
      return
      end
