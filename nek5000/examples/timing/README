
This case will run a battery of timing tests for:

    1.  matrix-matrix products (several flavors, several sizes)

    2.  contention-free processor-to-processor ping-pong tests

    3.  mpi_all_reduce times

Regarding the matrix-matrix (mxm) products, you should observe that
the case "mxm  " is one of the fastest for your particular polynomial
order.

Assuming that "logfile" holds the output from stdout of the timing
run, and that lx1=8, say, you could check the performance of the
default mxm for your particular case via:

grep " 8m" logfile | sort

which produces the following table.


  8m      8     8     8   24.1889      .39688E-04   mxmd  mem
  8m      8     8     8   37.2266      .17192E-05   madd  mem
  8m      8     8     8  118.2789      .81164E-05    std  mem
  8m      8     8     8  129.2449      .74278E-05   mxmu3 mem
  8m      8     8     8  164.1497      .58483E-05   mxmu4 mem
  8m      8     8     8  322.0313      .29811E-05   mxmu2 mem
  8m      8     8     8  323.4227      .29683E-05   mxmfb mem
  8m      8     8     8  370.6472      .25901E-05   mxm   mem
  8m      8     8     8  377.8222      .25409E-05   mxm44 mem
  8m      8     8     8  466.2156      .20591E-05   mxmf3 mem
  8m      8     8    64   24.9008      .30842E-03   mxmd  mem
  8m      8     8    64  126.4653      .60728E-04    std  mem
  8m      8     8    64  138.5817      .55419E-04   mxmu3 mem
  8m      8     8    64  174.6000      .43986E-04   mxmu4 mem
  8m      8     8    64  335.5077      .22891E-04   mxmu2 mem
  8m      8     8    64  351.0421      .21878E-04   mxmfb mem
  8m      8     8    64  519.8299      .14774E-04   mxm   mem
  8m      8     8    64  534.1275      .14379E-04   mxm44 mem
  8m      8     8    64  621.8112      .12351E-04   mxmf3 mem
  8m     64     8     8   28.7081      .26752E-03   mxmd  mem
  8m     64     8     8  227.3862      .33775E-04   mxmu3 mem
  8m     64     8     8  242.5045      .31670E-04   mxmu4 mem
  8m     64     8     8  335.4644      .22894E-04    std  mem
  8m     64     8     8  378.5475      .20288E-04   mxm44 mem
  8m     64     8     8  381.6136      .20125E-04   mxm   mem
  8m     64     8     8  498.5830      .15404E-04   mxmf3 mem
  8m     64     8     8  701.1681      .10953E-04   mxmu2 mem
  8m     64     8     8  720.9170      .10653E-04   mxmfb mem

Here, column 5 represents the Mflops achieved for non-cached
prodcuts of the form C=AxB, where A is n1 x n2  and B is n2 x n3,
where n1, n2, and n3 are given in cols. 2-4.  In this particular
case, we observed that the default mxm routine for this platform
realizes 370, 520, and 380 Mflops,

  8m      8     8     8  370.6472      .25901E-05   mxm   mem
  8m      8     8    64  519.8299      .14774E-04   mxm   mem
  8m     64     8     8  381.6136      .20125E-04   mxm   mem

whereas the peak performers yield roughly 1.2-1.9x above the
default:

  8m      8     8     8  466.2156      .20591E-05   mxmf3 mem
  8m      8     8    64  621.8112      .12351E-04   mxmf3 mem
  8m     64     8     8  720.9170      .10653E-04   mxmfb mem

Given that mxm accounts for ~90% of the ops in most 3D SEM 
computations, it may be worthwhile in this case to investigate
the performance gains achieved by calling the faster routines
in place of the default.


The ping-pong tests are conducted as follows.  Processor (aka core) 0
sends a message of length m (in 64-bit words) to processor q, which 
immediately replies.   The process is repeated k times, where 
k is in the range [1:1000].   For short messages, k=1000.  For
long messages, k=1.  Timings t0 and t1 are collected respectively 
before and after the k pairwise exchanges and the time is reported as 
t_c(m) = .5*(t1-t0)/k.    The .5 factor is to account for the round-trip
time, such that t_c(m) fairly represents the one-way transit time for
a message comprising m 64-bit words.   From a plot of t_c(m), one can 
determine the latency (t_c(1)) and inverse bandwidth (t_c(m)/m, m >> 1)
between processor 0 and q.   The test is repeated for q=1,...,q_max, where
q_max = min(511,P-1) and P is the number of processors.


The all_reduce test is similar to the ping-pong test.


11/18/2010

