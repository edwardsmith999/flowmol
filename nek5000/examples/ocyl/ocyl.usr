c-----------------------------------------------------------------------
c
c
c             OSCILLATING CYLINDER EXAMPLE
c             ============================
c
c
c     This case illustrates the Nek5000 ALE formulation for
c     flow past an oscillating cylinder in 2D.
c
c     (Note: The case "ocyl" is the first of two examples to
c     be posted.  An improved version with faster computation 
c     of mesh velocity will be posted soon.)
c
c     Frequency and amplitude of cylinder motion are set in the
c     .rea file:
c
c       0.200000     p033  user: frequency of oscillation
c       0.500000     p034  user: amplitude of oscillation
c
c     Note that the amplitude cannot be too large or the
c     mesh will become entangled and the simulation will stop.
c
c
c     The ALE formulation in this case solves an elasticity
c     problem at every timestep in order compute the mesh
c     velocity.  While robust, this approach is slow and not
c     recommended for production runs.   A better approach is
c     to compute the mesh velocity for a single periodic cycle
c     and to then use a short Fourier exapansion based on a
c     small set of time points over the full cycle to reconstruct
c     the desired mesh velocity at any future time point.
c     Such an approach would avoid repetitious computation of
c     the mesh velocity, which for this example is far more expensive
c     than computing the velocity/pressure for the fluid.  There
c     would be no loss in accuracy because the ALE formulation
c     allows for arbitrary mesh velocities, provided that they
c     meet the kinematic condition that the normal mesh velocity
c     component coincides with the normal fluid
c     velocity component on the boundary.
c
c
c     Prescribed boundary conditions are given in Cartesian coordinates.
c     The prescribed surface motion is indicated by the "mv " bc on your
c     moving surface (i.e., the cylinder surface).
c
c     To use mesh motion, you must also have
c
c     T ifstrs
c     T ifmvbd
c
c     in the .rea file and SIZE must have the following settings:
c
c           parameter (lx2=lx1-2)
c           parameter (ly2=ly1-2)
c           parameter (lz2=lz1  )
c           parameter (lx1m=lx1,ly1m=ly1,lz1m=lz1)
c
c
c     An example of the result is shown in ocyl.gif.
c
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      udiff  = 0
      utrans = 0

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ffx = 0.
      ffy = 0.
      ffz = 0.

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol   = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TSTEP'
      include 'INPUT'
      include 'NEKUSE'

      frequency = param(33)
      amplitude = param(34)

      if (x .lt. -1.1) then
        ux=1
        uy=0.
        uz=0.
      else
        call u_meshv(ux,uy,uz,x,y,z,time, frequency, amplitude)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux=0.0
      uy=0.0
      uz=0.0


      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'

      if (param(33) .eq. 0.0) param(33) = 1.0
      if (param(34) .eq. 0.0) param(34) = 1.0e-2

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

       param(59) = 1  ! all elements deformed
       param(66) = 4
       param(67) = 4

      ifxyo = .true.
c     ifusermv = .false.  ! do not define our own mesh velocity

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'
      include 'RESTART'

      parameter (lt=lx1*ly1*lz1*lelv)
      common /scrns/ vort(lt,3), w1(lt), w2(lt)

      n = nx1*ny1*nz1*nelv
      call comp_vort3(vort , w1, w2, vx, vy, vz)
      call copy (T,vort,n)    ! Vorticity --> T
      ifto = .true.           ! Dump vorticity as T

      return
      end
c-----------------------------------------------------------------------
      subroutine u_meshv(ux,uy,uz,x,y,z,time, frequency, amplitude)

      one          = 1.0
      pi           = 4.0*atan(one)
      omega        = frequency*2*pi

      ux = 0.0
      uy = amplitude * omega * cos(omega*time)
      uz = 0.0

      return
      end
c-----------------------------------------------------------------------
