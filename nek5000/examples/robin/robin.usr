c   
c   This is a 1-element unsteady conduction example that
c   illustrates the use of the convection heat-transfer
c   boundary condition, which is based on the Newton
c   law of cooling.
c   
c   For this boundary condition, the thermal flux at
c   the wall is proportional to the difference between
c   the wall temperature, Tw, and the ambient temperature,
c   Tinf (T_infinity), with proportionality coefficient
c   given by the heat transfer coefficient, hc.  That is,
c   at the wall,
c   
c         -div k grad T = hc(T-Tinf)
c   
c   The thermal boundary condition is specified in Nek5000
c   as "c  " when hc and Tinf are given in userbc(), or 
c   "C  " when hc and Tinf are given as constant parameters
c   in the .rea file.  For example, if Element 1, Side 2, 
c   were to have Tinf=5 and hc=9, the .rea file would have
c   
c     ***** THERMAL BOUNDARY CONDITIONS *****
c    :    :  :  
c    :    :  :  
c    C    1  2  5.000000      9.000000     0.0000000E+00 0.0000000E+00 0.0000000E+00
c    :    :  :  
c    :    :  :  
c   
c   This condition could also be set via userbc() with the following
c   lines in the .rea and .usr files.
c   
c   robin.rea:
c   
c     ***** THERMAL BOUNDARY CONDITIONS *****
c    :    :  :  
c    :    :  :  
c    c    1  2  5.000000      9.000000     0.0000000E+00 0.0000000E+00 0.0000000E+00
c    :    :  :  
c   
c   robin.usr:
c   
c         subroutine userbc (ix,iy,iz,iside,ieg)
c         :
c         :
c         tinf=5.0
c         hc=9.0
c         :
c   
c   
c   The latter approach is used in the robin example given
c   here.  Further details are provided in the users.pdf
c   documentation and also in this directory in robin.pdf.
c   
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)


c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).


      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      n = nx1*ny1*nz1*nelt
      tbar = glsc2(bm1,t,n)/voltm1
      if (nid.eq.0) write(6,1) istep,time,tbar,' tbar '
    1 format(i9,1p2e18.10,a6)
      
      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ux=0.0
      uy=0.0
      uz=0.0
      temp=0.0
      tinf=0.0
      hc=2.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ux=0.0
      uy=0.0
      uz=0.0
      temp=1
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'

c     call platform_timer(0) ! not too verbose
c     call platform_timer(1) ! mxm, ping-pong, and all_reduce timer

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

      x0=0
      x1=1
      call rescale_x(xm1,x0,x1)
      call rescale_x(ym1,x0,x1)

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c-----------------------------------------------------------------------
