c-----------------------------------------------------------------------
c
c     Determing the lowest eigenvalue of Laplace equation in a circle.
c
c     NOTE:  For this test to work, you must modify hmholtz.f to use
c            binvm1() as the preconditioner! (See "doall")
c
c
c     For the analytic solution, the eigenvalues come in two forms, the
c     purely radial (m=0 mode), and the mth-wavenumber azimuthal mode.
c     This code computes approximations to all of these.
c
c     Here, we are interested in comparing to the radial mode only, but
c     we could compute analytic solutions for both types.   
c
c     For the unit disk (R:=1), the radial modes have eigenvalues that
c     are the square of the roots of J0, five of which are listed here:
c
c       5.52007811028631 8.65372791291101 11.7915344390142 14.9309177084877 
c
c     The basic theoretical aspects of this test are listed below.
c
c     General solution to u_t = -A u is a series expansion in the
c     eigenfunctions of A:
c
c         u(X,t) = sum_k   exp ( - lam_k t ) phi_k (X) .
c
c     For Laplace in the unit disk with homogeneous Dirichlet conditions,
c
c         phi_k(X) = J_0 ( sqrt(lam_k) r ) .
c
c     Since phi_k(r=1) == 0, we have that
c
c         sqrt(lam_k) = x_k, the kth-zero of J_0(),  for k=1,2,... ,
c
c     so, 
c
c         lam_k(A) = (x_k)^2 .
c
c
c
c     In this example, we find lam_k() by solving a Poisson equation
c     with conjugate gradient (CG) iteration and then exploit the 
c     relationship between CG and Lanczos to get the eigenvalues of A.
c
c     If Ax=b is solved using preconditioned CG with preconditioner M,
c     the estimated spectrum approximates that of inv(M)*A.  In the
c     spectral element method, inv(B)*A approximates the Laplacian,
c     where B is the diagonal mass matrix and A the stiffness matrix.
c     Hence, CG will generate the desired eigenvalues if we set M=B.
c     To do so, one should uncomment 3 lines in setprec(), found in
c     hmholtz.f in the source directory.   We give a copy of the
c     modified source in hmholtz_b_prec.f.   The "doall" script
c     makes the requisite substitution in a local copy of the source.
c
c-----------------------------------------------------------------------
      subroutine bessel_roots(z0)

      real z0(5)

      z0(1) = 2.40482555769577
      z0(2) = 5.52007811028631
      z0(3) = 8.65372791291101
      z0(4) = 11.7915344390142
      z0(5) = 14.9309177084877 

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)


c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).


      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 1.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      if (istep.gt.0) call get_eig

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ux=0.0
      uy=0.0
      uz=0.0
      temp=0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ux=0.0
      uy=0.0
      uz=0.0
      temp=0
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'
      integer e,f,v

c     call platform_timer(0) ! not too verbose
c     call platform_timer(1) ! mxm, ping-pong, and all_reduce timer

      nface = 2*ndim

      do e=1,nelv
      do f=1,nface
         if (ccurve(f,e).eq.'C'.and.abs(curve(1,f,e)).gt.0.49999) then

            do i=0,1 ! Project points onto circle
               v=f+i
               if (v.gt.nface) v=1
               x = xc(v,e)
               y = yc(v,e)
               rr = x*x+y*y
               rr = sqrt(rr)
               xc(v,e) = 0.5*x/rr
               yc(v,e) = 0.5*y/rr
            enddo

         endif
      enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

c     param(66) = 4.   ! These give the std nek binary i/o and are 
c     param(67) = 4.   ! good default values

      r0=0.
      r1=1.
      call rescale_x(xm1,r0,r1)
      call rescale_x(ym1,r0,r1)

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c-----------------------------------------------------------------------
      subroutine get_eig  ! Get eigenvalues for last call to hmholtz
      INCLUDE 'SIZE'
      INCLUDE 'TOTAL'

      parameter (maxcg=900)                        ! From hmholtz.f
      common /tdarray/ diagt(maxcg),upper(maxcg)   ! From hmholtz.f
      common /iterhm/ niterhm                      ! From hmholtz.f

      common /scrcg/ lam(maxcg),wk(maxcg),z0(5),errm(5)
      real lam

      call bessel_roots(z0)

      NN   = lx1-1  ! Polynomial order

c     Call eigenvalue routine for Lanczos scheme
      n = niterhm  ! Dimension of Lanczos space
      call calc (diagt,upper,lam,wk,n,dmax,dmin)
      cond = dmax/dmin

      call sort (lam,wk,n)

c     Find closest eigenvalues using a stupid O(nm) algorithm
      do j=1,5
         eigj = z0(j)**2
         ermn = 1.e22
         do k=1,n
            errj = abs(eigj-lam(k))/eigj
            ermn = min(ermn,errj)
         enddo
         errm(j) = ermn
      enddo

      errx = 0  !  Find max error over first five eigenvalues
      do j=1,5
         errx = max(errx,errm(j))
      enddo

      eig0 = z0(1)**2
      err0 = abs(eig0-dmin)

      if (nid.eq.0) write(6,1) NN,n,kmax,eig0,err0,errx
    1 format(i3,i5,i2,1p3e15.7,' lambda')

      stop
 
      return
      end
c-----------------------------------------------------------------------
